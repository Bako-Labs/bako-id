{"/sdk/metadata":{"title":"Metadata","data":{"":"This method allows you to obtain and manipulate metadata from an handle on the Bako ID, essential for storing and\nretrieving custom information.","saving-metadata#Saving Metadata":"The saveMetadata method is used to save metadata to a handle. This method requires a wallet instance, a handle, and\na metadata configuration object. The metadata configuration object should contain a key and a value property. The key is\na string that represents the name of the metadata, and the value is the data to be stored.\nimport { UserMetadataContract } from '@bako-id/sdk';\nimport { Wallet } from 'fuels';\nconst account = Wallet.fromPrivateKey('<PRIVATE KEY>');\nconst domain = '@bako_user';\nconst userMetadataContract = UserMetadataContract.initialize(account, domain);\nconst metadataConfig = {\n  key: 'github',\n  value: 'mygithub',\n};\nconst { transactionResult } =\n  await userMetadataContract.saveMetadata(metadataConfig);\n::: warning ⚠️ IMPORTANT\nPlease note, this action is restricted due to security considerations. It ensures that only the owner of handle - in this\ncase, the user who owns the handle, have the right to modify its associated data. This prevents unwanted modifications and maintains the integrity of the data.\n:::","obtaining-metadata-by-key#Obtaining Metadata by Key":"The getMetadata method is used to retrieve metadata from an identity using a specific key. This method requires a wallet\ninstance, a domain, and a metadata key. The metadata key is a string that represents the name of the metadata to be retrieved.\nimport { UserMetadataContract } from '@bako-id/sdk';\nimport { Wallet } from 'fuels';\nconst account = Wallet.fromPrivateKey('<PRIVATE KEY>');\nconst domain = '@bako_user';\nconst userMetadataContract = UserMetadataContract.initialize(account, domain);\nconst metadataKey = 'github';\nconst metadata = await userMetadataContract.getMetadata(metadataKey);","obtaining-all-metadata#Obtaining All Metadata":"The getAll method is used to retrieve all metadata associated with an identity. This method requires a wallet instance\nand a domain. It returns an array of metadata objects, each containing a key and a value property.\nimport { UserMetadataContract } from '@bako-id/sdk';\nimport { Wallet } from 'fuels';\nconst account = Wallet.fromPrivateKey('<PRIVATE KEY>');\nconst domain = '@bako_user';\nconst userMetadataContract = UserMetadataContract.initialize(account, domain);\nconst allMetadata = await userMetadataContract.getAll();"}},"/learn/architecture":{"title":"Architecture","data":{"smart-contracts#Smart Contracts":"Bako ID has 2 contracts for its core functioning, these contracts are one responsible for registering and searching\nthe identity Register and another for the storage of its identities Storage.","storage-contract#Storage Contract":"This contract was conceived in a more abstract way to consider how the identity can be stored and, primarily, to ensure\nthat it will never be lost even with updates.\nThe security of this contract is guaranteed through validations, which allow only the owner of this contract and its\nimplementation to execute the methods.","registry-contract#Registry contract":"The registry, in a nutshell, is like the layer that allows interaction with the handlers, it allows to register a\nhandler and perform a search by its name.These methods make the call in storage, both to validate if the handler exists when creating and for the search.","methods-execution#Methods execution":"When executing the Registry contract method, a series of processing is carried out, from byte conversion\nto method call validations.In the demonstration below, we briefly explain how the execution process of the register method works.\nAnd here is a brief explanation of the resolver method."}}}