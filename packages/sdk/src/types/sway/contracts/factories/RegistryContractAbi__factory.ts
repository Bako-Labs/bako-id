/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.77.0
  Forc version: 0.51.1
  Fuel-Core version: 0.22.1
*/

import type {
  AbstractAddress,
  Account,
  BytesLike,
  DeployContractOptions,
  Provider,
  StorageSlot,
} from 'fuels';
import { Contract, ContractFactory, Interface } from 'fuels';
import type {
  RegistryContractAbi,
  RegistryContractAbiInterface,
} from '../RegistryContractAbi';

const _abi = {
  types: [
    {
      typeId: 0,
      type: '()',
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: 'b256',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: 'enum Identity',
      components: [
        {
          name: 'Address',
          type: 8,
          typeArguments: null,
        },
        {
          name: 'ContractId',
          type: 10,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: 'enum Option',
      components: [
        {
          name: 'None',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'Some',
          type: 6,
          typeArguments: null,
        },
      ],
      typeParameters: [6],
    },
    {
      typeId: 4,
      type: 'enum Permission',
      components: [
        {
          name: 'Authorized',
          type: 2,
          typeArguments: null,
        },
        {
          name: 'Unauthorized',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'NotFound',
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 5,
      type: 'enum RegistryContractError',
      components: [
        {
          name: 'StorageNotInitialized',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'AlreadyInitialized',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'DomainNotAvailable',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'IncorrectAssetId',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'InvalidAmount',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'DomainNotValid',
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: 'generic T',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 7,
      type: 'raw untyped ptr',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 8,
      type: 'struct Address',
      components: [
        {
          name: 'value',
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: 'struct Bytes',
      components: [
        {
          name: 'buf',
          type: 12,
          typeArguments: null,
        },
        {
          name: 'len',
          type: 14,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 10,
      type: 'struct ContractId',
      components: [
        {
          name: 'value',
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: 'struct FuelDomain',
      components: [
        {
          name: 'owner',
          type: 1,
          typeArguments: null,
        },
        {
          name: 'resolver',
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: 'struct RawBytes',
      components: [
        {
          name: 'ptr',
          type: 7,
          typeArguments: null,
        },
        {
          name: 'cap',
          type: 14,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 13,
      type: 'struct String',
      components: [
        {
          name: 'bytes',
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 14,
      type: 'u64',
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: 'owner',
          type: 8,
          typeArguments: null,
        },
        {
          name: 'storage_id',
          type: 10,
          typeArguments: null,
        },
      ],
      name: 'constructor',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read', 'write'],
        },
      ],
    },
    {
      inputs: [
        {
          name: 'name',
          type: 13,
          typeArguments: null,
        },
        {
          name: 'resolver',
          type: 1,
          typeArguments: null,
        },
      ],
      name: 'register',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read'],
        },
        {
          name: 'payable',
          arguments: [],
        },
      ],
    },
    {
      inputs: [
        {
          name: 'name',
          type: 13,
          typeArguments: null,
        },
      ],
      name: 'resolver',
      output: {
        name: '',
        type: 3,
        typeArguments: [
          {
            name: '',
            type: 11,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [
        {
          name: 'resolver',
          type: 1,
          typeArguments: null,
        },
      ],
      name: 'reverse_name',
      output: {
        name: '',
        type: 13,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: '',
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

const _storageSlots: StorageSlot[] = [
  {
    key: 'de9090cb50e71c2588c773487d1da7066d0c719849a7e58dc8b6397a25c567c0',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: 'f383b0ce51358be57daa3b725fe44acdb2d880604e367199080b4379c41bb6ed',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
  {
    key: 'f383b0ce51358be57daa3b725fe44acdb2d880604e367199080b4379c41bb6ee',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
];

export class RegistryContractAbi__factory {
  static readonly abi = _abi;

  static readonly storageSlots = _storageSlots;

  static createInterface(): RegistryContractAbiInterface {
    return new Interface(_abi) as unknown as RegistryContractAbiInterface;
  }

  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ): RegistryContractAbi {
    return new Contract(
      id,
      _abi,
      accountOrProvider,
    ) as unknown as RegistryContractAbi;
  }

  static async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {},
  ): Promise<RegistryContractAbi> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    const { storageSlots } = RegistryContractAbi__factory;

    const contract = await factory.deployContract({
      storageSlots,
      ...options,
    });

    return contract as unknown as RegistryContractAbi;
  }
}
