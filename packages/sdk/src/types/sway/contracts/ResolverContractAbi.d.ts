/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.81.0
  Forc version: 0.49.3
  Fuel-Core version: 0.22.1
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Option } from './common';

export enum ResolverContractErrorInput {
  AlreadyInitialized = 'AlreadyInitialized',
  StorageNotInitialized = 'StorageNotInitialized',
}
export enum ResolverContractErrorOutput {
  AlreadyInitialized = 'AlreadyInitialized',
  StorageNotInitialized = 'StorageNotInitialized',
}

export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type RawBytesInput = { ptr: BigNumberish; cap: BigNumberish };
export type RawBytesOutput = { ptr: BN; cap: BN };

export interface ResolverContractAbiInterface extends Interface {
  functions: {
    constructor: FunctionFragment;
    owner: FunctionFragment;
    resolver: FunctionFragment;
    name: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'constructor',
    values: [ContractIdInput],
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: 'owner',
    values: [StdString],
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: 'resolver',
    values: [StdString],
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'name', values: [string]): Uint8Array;

  decodeFunctionData(
    functionFragment: 'constructor',
    data: BytesLike,
  ): DecodedValue;
  decodeFunctionData(functionFragment: 'owner', data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: 'resolver',
    data: BytesLike,
  ): DecodedValue;
  decodeFunctionData(functionFragment: 'name', data: BytesLike): DecodedValue;
}

export class ResolverContractAbi extends Contract {
  interface: ResolverContractAbiInterface;
  functions: {
    constructor: InvokeFunction<[storage_id: ContractIdInput], void>;
    owner: InvokeFunction<[name: StdString], Option<string>>;
    resolver: InvokeFunction<[name: StdString], Option<string>>;
    name: InvokeFunction<[address: string], StdString>;
  };
}
